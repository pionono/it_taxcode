<?php
// $Id$

/**
 * Italian Tax Code is a Drupal module that adds
 * a CCK field, with validation, for italian tax code (codice fiscale).
 * 
 * Author: Sergio Durzu - sergio.durzu@ildeposito.org
 * 
 * The first regexp used to validate the tax code comes from here: 
 * http://www.ubercart.org/project/uc_codice_fiscale
 *
 * The script to check the control code of the tax code comes from here:
 * http://www.icosaedro.it/cf-pi/index.html 
 *
 * Module created with this tutorial: 
 * http://www.lullabot.com/articles/creating-custom-cck-fields
 *
 * Licensed under the GNU Public License (see LICENSE.txt)
 */

/**
 * Implementation of hook_field_info().
 */
function it_taxcode_field_info() {
  return array(
    // The machine name of the field, 
    // no more than 32 characters.
    'it_taxcode' => array(
      // The human-readable label of the field that will be 
      // seen in the Manage fields screen.
      'label' => t('Tax code'),
      // A description of what type of data the field stores.
      'description' => t('Stores and validates italian tax codes.'),      
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function it_taxcode_field_settings($op, $field) {
  switch ($op) {
    // Create the form element to be used on the field 
    // settings form. 
    case 'form':
      $form = array();
      $form['max_length'] = array(
        '#type' => 'textfield',
        '#title' => t('Maximum length'),
        '#default_value' => is_numeric($field['max_length']) ? $field['max_length'] : 16,
        '#required' => FALSE,
        
        // Use #element_validate to validate the settings.
        '#element_validate' => array('_it_taxcode_length_validate'),
        '#description' => t('The maximum length of the field in characters. Must be 16'),
      );
      return $form;
      
    // Return an array of the names of the field settings 
    // defined by this module. 
    case 'save':
      return array('max_length');

    // Define the database storage for this field using 
    // the same construct used by schema API. 
    case 'database columns':
      $columns['value'] = array(
        'type' => 'varchar', 
        'length' => is_numeric($field['max_length']) ? $field['max_length'] : 16, 
        'not null' => FALSE, 
        'sortable' => TRUE, 
        'views' => TRUE,
      );
      return $columns;

    // Optional: Make changes to the default $data array 
    // created for Views. 
    case 'views data':
      // Start with the $data created by CCK
      // and alter it as needed. 
      $data = content_views_field_views_data($field);
      $db_info = content_database_info($field);
      $table_alias = content_views_tablename($field);
      $field_data = $data[$table_alias][$field['field_name'] .'_value'];
      // Make changes to $data as needed here.
      return $data;
  }
}

/**
 * Custom validation of settings values.
 * 
 * Create callbacks like this to do settings validation.
 */
function _it_taxcode_length_validate($element, &$form_state) {
  $value = $form_state['values']['max_length'];
  if ($value && !is_numeric($value)|| $value < 1 || $value > 255) {
    form_set_error('max_length', t('"Max length" must be a number between 1 and 255.'));
  }
}

/**
 * Implementation of hook_field().
 */
function it_taxcode_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
    // Do validation on the field values here. 
    case 'validate':
      if (is_array($items)) {
        foreach ($items as $delta => $item) {
          // The error_element is needed so that CCK can 
          // set an error on the right sub-element when 
          // fields are deeply nested in the form.
          $error_element = isset($item['_error_element']) ? $item['_error_element'] : '';
          if (is_array($item) && isset($item['_error_element'])) unset($item['_error_element']);
        
	    if (!empty($item['value'])) {
			/***** validazione ************/
    		$cf = strtoupper($item['value']);			
			if( !eregi('^([0-9]{11}|[A-Z]{6}[0-9]{2}[A-Z][0-9]{2}[A-Z][0-9]{3}[A-Z])$', $cf)) {
				form_set_error($error_element, t('Field Tax code contains chars not allowed '));
			}
			$s = 0;
			for( $i = 1; $i <= 13; $i += 2 ){
				$c = $cf[$i];
				if( '0' <= $c && $c <= '9' )
						$s += ord($c) - ord('0');
				else
						$s += ord($c) - ord('A');
			}
			
			for( $i = 0; $i <= 14; $i += 2 ){
				$c = $cf[$i];
				switch( $c ){
					case '0':  $s += 1;  break;
					case '1':  $s += 0;  break;
					case '2':  $s += 5;  break;
					case '3':  $s += 7;  break;
					case '4':  $s += 9;  break;
					case '5':  $s += 13;  break;
					case '6':  $s += 15;  break;
					case '7':  $s += 17;  break;
					case '8':  $s += 19;  break;
					case '9':  $s += 21;  break;
					case 'A':  $s += 1;  break;
					case 'B':  $s += 0;  break;
					case 'C':  $s += 5;  break;
					case 'D':  $s += 7;  break;
					case 'E':  $s += 9;  break;
					case 'F':  $s += 13;  break;
					case 'G':  $s += 15;  break;
					case 'H':  $s += 17;  break;
					case 'I':  $s += 19;  break;
					case 'J':  $s += 21;  break;
					case 'K':  $s += 2;  break;
					case 'L':  $s += 4;  break;
					case 'M':  $s += 18;  break;
					case 'N':  $s += 20;  break;
					case 'O':  $s += 11;  break;
					case 'P':  $s += 3;  break;
					case 'Q':  $s += 6;  break;
					case 'R':  $s += 8;  break;
					case 'S':  $s += 12;  break;
					case 'T':  $s += 14;  break;
					case 'U':  $s += 16;  break;
					case 'V':  $s += 10;  break;
					case 'W':  $s += 22;  break;
					case 'X':  $s += 25;  break;
					case 'Y':  $s += 24;  break;
					case 'Z':  $s += 23;  break;
				}
    		}
    		if( chr($s%26 + ord('A')) != $cf[15] ) {
				form_set_error($error_element, t('The control code of the tax code is wrong.'));    
			}
		}
	}        
}
return $items;

    // This is where you make sure that user-provided 
    // data is sanitized before being displayed.
    case 'sanitize':
      foreach ($items as $delta => $item) {
        $it_taxcode = check_plain($item['value']);
        $items[$delta]['safe'] = $it_taxcode;
      }
  }
}

/**
 * Implementation of hook_content_is_empty().
 */
function it_taxcode_content_is_empty($item, $field) {
  if (empty($item['value'])) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implementation of hook content_generate().
 */
function it_taxcode_content_generate($node, $field) {
  $node_field = array();
  // Generate a value that respects max_length.
  if (empty($field['max_length'])) {
    $field['max_length'] = 12;
  }
  $node_field['value'] = user_password($field['max_length']);
  return $node_field;
}

/**
 * Implementation of hook_token_list() 
 * and hook_token_values().
 * 
 * Optional, provide token values for this field.
 */
function it_taxcode_token_list($type = 'all') {
  if ($type == 'field' || $type == 'all') {
    $tokens = array();

    $tokens['it_taxcode']['raw']       = t('Raw, unfiltered text');
    $tokens['it_taxcode']['formatted'] = t('Formatted and filtered text');

    return $tokens;
  }
}

function it_taxcode_token_values($type, $object = NULL) {
  if ($type == 'field') {
    $item = $object[0];

    $tokens['raw']  = $item['value'];
    $tokens['formatted'] = isset($item['view']) ? $item['view'] : '';
    return $tokens;
  }
}

//==========================================//
// DEFINING A FORMATTER
//==========================================//

/**
 * Implementation of hook_theme().
 */
function it_taxcode_theme() {

  return array(
    // Themes for the formatters.
    'it_taxcode_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'it_taxcode_formatter_plain' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function it_taxcode_field_formatter_info() {
  return array(
    // The machine name of the formatter.
    'default' => array(
      // The human-readable label shown on the Display 
      // fields screen.
      'label' => t('Default'),
      // An array of the field types this formatter 
      // can be used on.
      'field types' => array('it_taxcode'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
    'plain' => array(
      'label' => t('Plain text'),
      'field types' => array('it_taxcode'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Theme function for 'default' example field formatter.
 */
function theme_it_taxcode_formatter_default($element) {
  return $element['#item']['safe'];
}

/**
 * Theme function for 'plain' example field formatter.
 */
function theme_it_taxcode_formatter_plain($element) {
  return strip_tags($element['#item']['safe']);
}

//==========================================//
// DEFINING A WIDGET
//==========================================//

/**
 * Implementation of hook_widget_info().
 */
function it_taxcode_widget_info() {
  return array(
    // The machine name of the widget, no more than 32 
    // characters.
    'it_taxcode_widget' => array(
      // The human-readable label of the field that will be 
      // seen in the Manage fields screen.
      'label' => t('Tax code'),
      // An array of the field types this widget can be 
      // used with.
      'field types' => array('it_taxcode'),
      // Who will handle multiple values, default is core.
      // 'CONTENT_HANDLE_MODULE' means the module does it.
      // See optionwidgets for an example of a module that 
      // handles its own multiple values.
      'multiple values' => CONTENT_HANDLE_CORE,
      'callbacks' => array(
        // Who will create the default value, default is core.
        // 'CONTENT_CALLBACK_CUSTOM' means the module does it.
        // 'CONTENT_CALLBACK_NONE' means this widget has 
        // no default value.
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function it_taxcode_widget_settings($op, $widget) {
  switch ($op) {
    // Create the form element to be used on the widget 
    // settings form. 
    case 'form':
      $form = array();
      $size = (isset($widget['size']) && is_numeric($widget['size'])) ? $widget['size'] : 60;
      $form['size'] = array(
        '#type' => 'textfield',
        '#title' => t('Size of textfield'),
        '#default_value' => $size,
        '#element_validate' => array('_element_validate_integer_positive'),
        '#required' => TRUE,
      );
      return $form;

    // Return an array of the names of the widget settings 
    // defined by this module. 
    case 'save':
      return array('size');
  }
}

/**
 * Implementation of hook_widget().
 */
function it_taxcode_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  
  $element['value'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($field['widget']['label']),
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
    '#autocomplete_path' => $element['#autocomplete_path'],
    '#size' => !empty($field['widget']['size']) ? $field['widget']['size'] : 60,
    '#attributes' => array('class' => 'it_taxcode'),
    '#required' => $field['required'],
    '#maxlength' => !empty($field['max_length']) ? $field['max_length'] : NULL,
  );
  
  // Used so that hook_field('validate') knows where to 
  // flag an error in deeply nested forms.
  if (empty($form['#parents'])) {
    $form['#parents'] = array();
  }
  $element['_error_element'] = array(
    '#type' => 'value',
    '#value' => implode('][', array_merge($form['#parents'], array('value'))),
  );
  
  return $element;
}
